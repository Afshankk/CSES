//This is Recurison for Coin Combination I.
// Number if coins = n also the size of n.
//TC = O(n^x) branching factor is n and x is the target sum required.
//SC = O(x) (Resursion call stack)  
#include<iostream>
#include<vector>
#include<climits>

using namespace std;

cont int mod = 1e9  + 7;

int f(int x,vector<int> &coins) {
    if(x == 0) return 1;
    if(x<0) return 0;
    int ways = 0;
    for(int coin:coins){
        ways = (ways + f(x-coin,coins))%mod;
    }  
    return ways;
}

int main() {
    int n; //number of coins.
    int x; //desired sum.
    cin>>n;
    cin>>x;
    vector<int> coins(n);
    for(int i = 0;i<n;i++){
        cin>>coins[i];
    }
    int result = f(x,coins);
    cout<<result;
}

************************************************************************************************************************************************

//This is Memoization for Coin Combination I.
// Number if coins = n also the size of n.
//TC = O(n.x)(for each n we have x subproblems)
//SC = O(x) (Resursion call stack+vector dp)  
#include<iostream>
#include<vector>
#include<climits>

using namespace std;

int f(int x,vector<int> &coins,vector<int> &dp) {
    if(x == 0) return 1;
    if(x<0) return 0;
    if(dp[x] != -1) return dp[x];
    int ways = 0;
    for(int coin:coins){
        ways = ways + f(x-coin,coins,dp);
    }  
    dp[x] = ways;
    return ways;
}

int main() {
    int n; //number of coins.
    int x; //desired sum.
    cin>>n;
    cin>>x;
    vector<int> coins(n);
    for(int i = 0;i<n;i++){
        cin>>coins[i];
    }
    vector<int> dp(x+1,-1);
    int result = f(x,coins,dp);
    cout<<result;
}
