//This is Recusion for Book Shop.
//TC = O(2^n)
//SC = O(n)(call stack)

//This problem is 0/1 Knapsack problem.

#include<iostream>
#include<vector>

using namespace std;

int f(int i,int remainingMoney,vector<int> &prices,vector<int> &pages) {
    if(i == 0 || remainingMoney == 0) return 0;

    int not_pick = f(i-1,remainingMoney,prices,pages);

    int pick = 0;
    if(remainingMoney >= prices[i-1]){
        pick = pages[i-1] + f(i-1,remainingMoney-prices[i-1],prices,pages);
    }

    return max(pick,not_pick);

}

int main() {
    int n; // number of books.
    int x; // maximum total price.
    cin >> n;
    cin >> x;
    vector<int> price(n);
    vector<int> pages(n);
    for(int i = 0;i < n;i++){
        cin>>price[i];
    }
    for(int i = 0;i < n;i++){
        cin>>pages[i];
    }

    int result = f(n,x,price,pages);
    cout<<result;
}


****************************************************************************************************************************************************************************************


//This is Recusion for Book Shop.
//TC = O(n*x)
//SC = O(n*x)

//This problem is 0/1 Knapsack problem.

#include<iostream>
#include<vector>

using namespace std;


int f(int i,int remainingMoney,vector<int> &prices,vector<int> &pages,vector<vector<int>> &dp) {
    if(i == 0 || remainingMoney == 0) return 0;

    if (dp[i][remainingMoney] != -1) {
        return dp[i][remainingMoney];
    }

    int not_pick = f(i-1,remainingMoney,prices,pages,dp);

    int pick = 0;
    if(remainingMoney >= prices[i-1]){
        pick = pages[i-1] + f(i-1,remainingMoney-prices[i-1],prices,pages,dp);
    }

    return dp[i][remainingMoney] = max(pick,not_pick);

}

int main() {
    int n; // number of books.
    int x; // maximum total price.
    cin >> n;
    cin >> x;
    vector<int> price(n);
    vector<int> pages(n);
    for(int i = 0;i < n;i++){
        cin>>price[i];
    }
    for(int i = 0;i < n;i++){
        cin>>pages[i];
    }

    vector<vector<int>> dp(n + 1, vector<int>(x + 1, -1));
    int result = f(n,x,price,pages,dp);
    cout<<result;
}


****************************************************************************************************************************************************************************************************



//This is Tabulation for Book Shop 
//TC = O(n*x)
//Sc = O(n*x)
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n, x;
    cin >> n >> x;  // n: number of books, x: max total price

    vector<int> h(n), s(n);  // h: prices, s: pages

    // Reading the price of each book
    for (int i = 0; i < n; i++) {
        cin >> h[i];
    }

    // Reading the number of pages of each book
    for (int i = 0; i < n; i++) {
        cin >> s[i];
    }

    // DP table, where dp[j] is the maximum number of pages we can get with a total price j
    vector<int> dp(x + 1, 0);

    // Loop through each book
    for (int i = 0; i < n; i++) {
        // Traverse in reverse to avoid overwriting when considering the same book
        for (int j = x; j >= h[i]; j--) {
            dp[j] = max(dp[j], dp[j - h[i]] + s[i]);
        }
    }

    // The answer is the maximum number of pages we can get with a total price at most x
    cout << dp[x] << endl;

    return 0;
}
