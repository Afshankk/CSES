//This is Recursion for Grid Paths.
//TC = O(2^n)
//SC = O(n)(Recusion call stack/n is depth of the recursion tree formed)

#include<iostream>
#include<vector>
#include<climits>

using namespace std;


const int mod = 1e9 + 7;


int f(int n,int i,int j,vector<vector<char>> &grid) {
    if(i >= n || j>= n || i<0 || j<0 || grid[i][j] == '*') return 0;
    if(i == n-1 && j== n-1) return 1;
    int ways = 0;
    ways = f(n,i+1,j,grid) + f(n,i,j+1,grid);
    return ways%mod;
    
}

int main() {
    int n; //grid size
    cin>>n;
    vector<vector<char>> grid(n,vector<char>(n));
    for(int i = 0;i<n;i++){
        for(int j = 0;j<n;j++){
            cin>>grid[i][j];
        }
    }
    int result = f(n,0,0,grid);
    cout<<result;
}

***************************************************************************************************************************************************************************************


//This is Memoization using 2D DP Vectorfor Grid Paths.
//TC = O(n*n)(Each unique (i, j) state is computed once, and there are n * n states, so the time complexity becomes O(n^2).)
//SC = O(n*n)(dp vector)

#include<iostream>
#include<vector>
#include<climits>

using namespace std;


const int mod = 1e9 + 7;



int f(int n,int i,int j,vector<vector<char>> &grid,vector<vector<int>> &dp) {
    if(i >= n || j>= n || i<0 || j<0 || grid[i][j] == '*') return 0;
    if(i == n-1 && j== n-1) return 1;
    int ways = 0;
    if(dp[i][j] != -1) return dp[i][j];
    ways = f(n,i+1,j,grid,dp) + f(n,i,j+1,grid,dp);
    dp[i][j] = ways%mod;
    return dp[i][j];
    
}

int main() {
    
    int n; //grid size
    cin>>n;
    vector<vector<char>> grid(n,vector<char>(n));
    for(int i = 0;i<n;i++){
        for(int j = 0;j<n;j++){
            cin>>grid[i][j];
        }
    }
    vector<vector<int>> dp(n,vector<int>(n,-1));
    int result = f(n,0,0,grid,dp);
    cout<<result;
}

***********************************************************************************************************************************************************************************************




