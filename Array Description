//This is Recursion for Array Description
//TC = O(3^n)
//SC = O(n)
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

const int mod = 1e9 + 7;

int f(int i,int prev,vector<int> &array,int m){
    if( i == array.size()) return 1;
    
    if(array[i] != 0){
        if(prev == -1 || abs(prev - array[i]) <=1){
            return f(i+1,array[i],array,m);
        }else{
            return 0;
        }
    }

    int ways = 0;

    for(int val = 1;val<=m;val++){
        if(prev == -1|| abs(val-prev) <= 1){
            ways = (ways + f(i + 1, val, array, m))%mod;
        }
    }

    return ways;
}

int main() {
    int n;//size of array
    int m;//upper bound
    cin>>n>>m;
    vector<int> array(n);
    for(int i=0;i<n;i++){
        cin>>array[i];
    }

    int result = f(0,-1,array,m);
    cout<<result;
}


*********************************************************************************************************************************************************************************************

//This is Memoization for Array Description
//TC = O(n*m)
//SC = O(n*m)
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

const int mod = 1e9 + 7;

vector<vector<int>> dp;
int f(int i,int prev,vector<int> &array,int m){
    if( i == array.size()) return 1;
    if (dp[i][prev + 1] != -1) return dp[i][prev + 1];
    
    if(array[i] != 0){
        if(prev == -1 || abs(prev - array[i]) <=1){
            return dp[i][prev+1] = f(i+1,array[i],array,m);
        }else{
            return dp[i][prev + 1] = 0;
        }
    }

    int ways = 0;

    for(int val = 1;val<=m;val++){
        if(prev == -1|| abs(val-prev) <= 1){
            ways = (ways + f(i + 1, val, array, m))%mod;
        }
    }

    return dp[i][prev + 1] = ways;
}

int main() {
    int n;//size of array
    int m;//upper bound
    cin>>n>>m;
    vector<int> array(n);
    dp = vector<vector<int>>(n, vector<int>(m + 2, -1));
    for(int i=0;i<n;i++){
        cin>>array[i];
    }

    int result = f(0,-1,array,m);
    cout<<result;
}




